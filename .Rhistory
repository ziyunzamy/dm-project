delays_des.y),
na.rm=TRUE))
### add to data set ###
flights2015_mod_v2 <- left_join(flights2015_mod_v1, delays_by_des_3,
by = c("FL_DATE" = "FL_DATE",
"DEST_AIRPORT_ID" = "DEST_AIRPORT_ID"))
### get rid of useless variables ###
flights2015_mod_v2 <- flights2015_mod_v2[, -c(40:41)]
#### ORIGIN airport delays ####
flights16_v <- read.csv("flights2016_visible.csv")
flights16_g <- read.csv("flights2016_guess.csv")
### filter our delayed flights ###
flights16_v_delay <- flights16_v[which(flights16_v$DEP_DEL15==1),]
### group by days ###
delays_by_days_16 <- flights16_v_delay %>%
group_by(FL_DATE, ORIGIN_AIRPORT_ID) %>%
summarize(delays = n())
### get previous day ###
delays_by_days_16_2 <- mutate(delays_by_days_16,
FL_DATE_2 = as.character(as.Date(FL_DATE)-1))
delays_by_days_16_3 <- left_join(delays_by_days_16_2, delays_by_days_16,
by = c("FL_DATE_2" = "FL_DATE",
"ORIGIN_AIRPORT_ID" = "ORIGIN_AIRPORT_ID"))
delays_by_days_16_3 <- mutate(delays_by_days_16_3,
delays_2 = rowSums(cbind(delays.x, delays.y), na.rm=TRUE))
### add to data set ###
flights16_v1 <- left_join(flights16_g, delays_by_days_16_3,
by = c("FL_DATE" = "FL_DATE",
"ORIGIN_AIRPORT_ID" = "ORIGIN_AIRPORT_ID"))
flights16_v1 <- flights16_v1[, -c(66:67)]
#### DESTINATION airport delays ####
### group by days ###
delays_by_des_16 <- flights16_v_delay %>%
group_by(FL_DATE, DEST_AIRPORT_ID) %>%
summarize(delays_des = n())
### get previous day ###
delays_by_des_16_2 <- mutate(delays_by_des_16,
FL_DATE_2 = as.character(as.Date(FL_DATE)-1))
delays_by_des_16_3 <- left_join(delays_by_des_16_2, delays_by_des_16,
by = c("FL_DATE_2" = "FL_DATE",
"DEST_AIRPORT_ID" = "DEST_AIRPORT_ID"))
delays_by_des_16_3 <- mutate(delays_by_des_16_3,
delays_des_2 = rowSums(cbind(delays_des.x,
delays_des.y),
na.rm=TRUE))
### add to data set ###
flights16_v2 <- left_join(flights16_v1, delays_by_des_16_3,
by = c("FL_DATE" = "FL_DATE",
"DEST_AIRPORT_ID" = "DEST_AIRPORT_ID"))
flights16_v2 <- flights16_v2[, -c(68:69)]
holidays <- c('2015-01-01', '2015-01-19', '2015-02-14', '2015-02-16',
'2015-05-25', '2015-07-04', '2015-09-07',
'2015-10-12','2015-11-11','2015-11-26', '2015-12-25')
holidayDates <- as.Date(holidays)
DaysToHoliday <- function(month, day){
# Input a month and day from the flightsDB
# Get our year.
year <- 2015
currDate <- as.Date(paste(year,month,day,sep = '-'))
# Create a DATE object we can use to calculate the time difference
numDays <- as.numeric(min(abs(currDate-holidayDates)))
# Now find the minimum difference between the date and our holidays
return(numDays)
# We can vectorize this to automatically find the minimum closest
# holiday by subtracting all holidays at once
}
# Get all of the dates through unique Month/Day combinations
datesOfYear <- unique(flights2015_mod_v2[,3:4])
# Apply our function in a vectorized manner via one of R's many "apply" functions (in this case mapply)
# to each unique date and save
datesOfYear$HDAYS <- mapply(DaysToHoliday, datesOfYear$MONTH, datesOfYear$DAY_OF_MONTH)
InputDays <- function(month,day){
finalDays <- datesOfYear$HDAYS[datesOfYear$MONTH == month & datesOfYear$DAY_OF_MONTH == day] # Find which row to get
return(finalDays)
}
flights2015_mod_v2$HDAYS <- mapply(InputDays,
flights2015_mod_v2$MONTH,
flights2015_mod_v2$DAY_OF_MONTH)
holidays_16 <- c('2016-01-01', '2016-01-18', '2016-02-14', '2016-02-15',
'2016-05-30', '2016-07-04', '2016-09-05',
'2016-10-10','2016-11-11','2016-11-24', '2016-12-25')
holidayDates_16 <- as.Date(holidays_16)
DaysToHoliday_16 <- function(month, day){
year <- 2016
currDate <- as.Date(paste(year,month,day,sep = '-'))
numDays <- as.numeric(min(abs(currDate-holidayDates_16)))
return(numDays)
}
datesOfYear_16 <- unique(flights16_v2[,3:4])
datesOfYear_16$HDAYS <- mapply(DaysToHoliday_16, datesOfYear_16$MONTH,
datesOfYear_16$DAY_OF_MONTH)
InputDays_16 <- function(month,day){
finalDays <- datesOfYear_16$HDAYS[datesOfYear_16$MONTH == month & datesOfYear_16$DAY_OF_MONTH == day] # Find which row to get
return(finalDays)
}
flights16_v2$HDAYS <- mapply(InputDays_16,
flights16_v2$MONTH,
flights16_v2$DAY_OF_MONTH)
rm(list=ls())
library(tidyverse)
library(forcats)
library(devtools)
flights15 <- read.csv("flights2015.csv")
flights2015_mod = flights15[, -c(31:33, 35:40, 42:50, 52:53, 57:64)]
#### ORIGIN airport delays ####
### filter our delayed flights ###
flights2015_mod_delay <- flights2015_mod[which(flights2015_mod$DEP_DEL15==1),]
### group by days ###
delays_by_days <- flights2015_mod_delay %>%
group_by(FL_DATE, ORIGIN_AIRPORT_ID) %>%
summarize(delays = n())
### get previous day ###
delays_by_days_2 <- mutate(delays_by_days,
FL_DATE_2 = as.character(as.Date(FL_DATE)-1))
delays_by_days_3 <- left_join(delays_by_days_2, delays_by_days,
by = c("FL_DATE_2" = "FL_DATE",
"ORIGIN_AIRPORT_ID" = "ORIGIN_AIRPORT_ID"))
delays_by_days_3 <- mutate(delays_by_days_3,
delays_2 = rowSums(cbind(delays.x, delays.y), na.rm=TRUE))
### add to data set ###
flights2015_mod_v1 <- left_join(flights2015_mod, delays_by_days_3,
by = c("FL_DATE" = "FL_DATE",
"ORIGIN_AIRPORT_ID" = "ORIGIN_AIRPORT_ID"))
flights2015_mod_v1 <- flights2015_mod_v1[, -c(38:39)]
#### DESTINATION airport delays ####
### group by days ###
delays_by_des <- flights2015_mod_v1 %>%
group_by(FL_DATE, DEST_AIRPORT_ID) %>%
summarize(delays_des = n())
### get previous day ###
delays_by_des_2 <- mutate(delays_by_des,
FL_DATE_2 = as.character(as.Date(FL_DATE)-1))
delays_by_des_3 <- left_join(delays_by_des_2, delays_by_des,
by = c("FL_DATE_2" = "FL_DATE",
"DEST_AIRPORT_ID" = "DEST_AIRPORT_ID"))
delays_by_des_3 <- mutate(delays_by_des_3,
delays_des_2 = rowSums(cbind(delays_des.x,
delays_des.y),
na.rm=TRUE))
### add to data set ###
flights2015_mod_v2 <- left_join(flights2015_mod_v1, delays_by_des_3,
by = c("FL_DATE" = "FL_DATE",
"DEST_AIRPORT_ID" = "DEST_AIRPORT_ID"))
### get rid of useless variables ###
flights2015_mod_v2 <- flights2015_mod_v2[, -c(40:41)]
#### ORIGIN airport delays ####
flights16_v <- read.csv("flights2016_visible.csv")
flights16_g <- read.csv("flights2016_guess.csv")
### filter our delayed flights ###
flights16_v_delay <- flights16_v[which(flights16_v$DEP_DEL15==1),]
### group by days ###
delays_by_days_16 <- flights16_v_delay %>%
group_by(FL_DATE, ORIGIN_AIRPORT_ID) %>%
summarize(delays = n())
### get previous day ###
delays_by_days_16_2 <- mutate(delays_by_days_16,
FL_DATE_2 = as.character(as.Date(FL_DATE)-1))
delays_by_days_16_3 <- left_join(delays_by_days_16_2, delays_by_days_16,
by = c("FL_DATE_2" = "FL_DATE",
"ORIGIN_AIRPORT_ID" = "ORIGIN_AIRPORT_ID"))
delays_by_days_16_3 <- mutate(delays_by_days_16_3,
delays_2 = rowSums(cbind(delays.x, delays.y), na.rm=TRUE))
### add to data set ###
flights16_v1 <- left_join(flights16_g, delays_by_days_16_3,
by = c("FL_DATE" = "FL_DATE",
"ORIGIN_AIRPORT_ID" = "ORIGIN_AIRPORT_ID"))
flights16_v1 <- flights16_v1[, -c(66:67)]
#### DESTINATION airport delays ####
### group by days ###
delays_by_des_16 <- flights16_v_delay %>%
group_by(FL_DATE, DEST_AIRPORT_ID) %>%
summarize(delays_des = n())
### get previous day ###
delays_by_des_16_2 <- mutate(delays_by_des_16,
FL_DATE_2 = as.character(as.Date(FL_DATE)-1))
delays_by_des_16_3 <- left_join(delays_by_des_16_2, delays_by_des_16,
by = c("FL_DATE_2" = "FL_DATE",
"DEST_AIRPORT_ID" = "DEST_AIRPORT_ID"))
delays_by_des_16_3 <- mutate(delays_by_des_16_3,
delays_des_2 = rowSums(cbind(delays_des.x,
delays_des.y),
na.rm=TRUE))
### add to data set ###
flights16_v2 <- left_join(flights16_v1, delays_by_des_16_3,
by = c("FL_DATE" = "FL_DATE",
"DEST_AIRPORT_ID" = "DEST_AIRPORT_ID"))
flights16_v2 <- flights16_v2[, -c(68:69)]
holidays <- c('2015-01-01', '2015-01-19', '2015-02-14', '2015-02-16',
'2015-05-25', '2015-07-04', '2015-09-07',
'2015-10-12','2015-11-11','2015-11-26', '2015-12-25')
holidayDates <- as.Date(holidays)
DaysToHoliday <- function(month, day){
# Input a month and day from the flightsDB
# Get our year.
year <- 2015
currDate <- as.Date(paste(year,month,day,sep = '-'))
# Create a DATE object we can use to calculate the time difference
numDays <- as.numeric(min(abs(currDate-holidayDates)))
# Now find the minimum difference between the date and our holidays
return(numDays)
# We can vectorize this to automatically find the minimum closest
# holiday by subtracting all holidays at once
}
# Get all of the dates through unique Month/Day combinations
datesOfYear <- unique(flights2015_mod_v2[,3:4])
# Apply our function in a vectorized manner via one of R's many "apply" functions (in this case mapply)
# to each unique date and save
datesOfYear$HDAYS <- mapply(DaysToHoliday, datesOfYear$MONTH, datesOfYear$DAY_OF_MONTH)
InputDays <- function(month,day){
finalDays <- datesOfYear$HDAYS[datesOfYear$MONTH == month & datesOfYear$DAY_OF_MONTH == day] # Find which row to get
return(finalDays)
}
flights2015_mod_v2$HDAYS <- mapply(InputDays,
flights2015_mod_v2$MONTH,
flights2015_mod_v2$DAY_OF_MONTH)
holidays_16 <- c('2016-01-01', '2016-01-18', '2016-02-14', '2016-02-15',
'2016-05-30', '2016-07-04', '2016-09-05',
'2016-10-10','2016-11-11','2016-11-24', '2016-12-25')
holidayDates_16 <- as.Date(holidays_16)
DaysToHoliday_16 <- function(month, day){
year <- 2016
currDate <- as.Date(paste(year,month,day,sep = '-'))
numDays <- as.numeric(min(abs(currDate-holidayDates_16)))
return(numDays)
}
datesOfYear_16 <- unique(flights16_v2[,3:4])
datesOfYear_16$HDAYS <- mapply(DaysToHoliday_16, datesOfYear_16$MONTH,
datesOfYear_16$DAY_OF_MONTH)
InputDays_16 <- function(month,day){
finalDays <- datesOfYear_16$HDAYS[datesOfYear_16$MONTH == month & datesOfYear_16$DAY_OF_MONTH == day] # Find which row to get
return(finalDays)
}
flights16_v2$HDAYS <- mapply(InputDays_16,
flights16_v2$MONTH,
flights16_v2$DAY_OF_MONTH)
which(is.na(flights2015_mod_v2$DEP_DEL15))
flights2015_mod_v3 <- flights2015_mod_v2[which(not is.na(flights2015_mod_v2$DEP_DEL15))]
flights2015_mod_v3 <- flights2015_mod_v2[which(is.na(flights2015_mod_v2$DEP_DEL15))]
flights2015_mod_v3 <- flights2015_mod_v2[which(is.na(flights2015_mod_v2$DEP_DEL15)),]
flights2015_mod_v3 <- flights2015_mod_v2[which(not is.na(flights2015_mod_v2$DEP_DEL15)),]
flights2015_mod_v3 <- flights2015_mod_v2[-which(is.na(flights2015_mod_v2$DEP_DEL15)),]
dim(flights2015_mod_v3)
dim(flights2015_mod_v2)
fights2015_over <- ovun.sample(DEP_DEL15 ~ ., data = flights2015_mod_v3, method = "both", N = 60000)$data
library(ROSE)
fights2015_over <- ovun.sample(DEP_DEL15 ~ ., data = flights2015_mod_v3, method = "both", N = 60000)$data
table(fights2015_over$DEP_DEL15 )
library(randomForest)
forest = randomForest(DEP_DEL15 ~., data = flights2015_mod_v2, ntree=500)
forest = randomForest(DEP_DEL15 ~., data = flights2015_mod_v3, ntree=500)
forest = randomForest(DEP_DEL15 ~., data = flights2015_mod_v3, ntree=500, na.action = na.pass)
forest = randomForest(factor(DEP_DEL15) ~., data = flights2015_mod_v3, ntree=500, na.action = na.pass)
flights2015_over$DEP_DEL15 <- as.factor(flights2015_over$DEP_DEL15)
fights2015_over <- ovun.sample(DEP_DEL15 ~ ., data = flights2015_mod_v3, method = "both", N = 60000)$data
flights2015_over$DEP_DEL15 <- as.factor(flights2015_over$DEP_DEL15)
flights2015_over <- ovun.sample(DEP_DEL15 ~ ., data = flights2015_mod_v3, method = "both", N = 60000)$data
flights2015_over$DEP_DEL15 <- as.factor(flights2015_over$DEP_DEL15)
forest = randomForest(factor(DEP_DEL15) ~., data = flights2015_over, ntree=500, na.action = na.pass)
table(flights2015_over$DEP_DEL15)
forest = randomForest(DEP_DEL15 ~., data = flights2015_over, ntree=500, na.action = na.pass)
flights2015_over <- ovun.sample(DEP_DEL15 ~ ., data = flights2015_mod_v3, method = "both", N = 60000)$data
forest = randomForest(DEP_DEL15 ~., data = flights2015_over, ntree=500, na.action = na.pass)
flights2015_over <- ovun.sample(DEP_DEL15 ~ ., data = flights2015_mod_v3, method = "both", N = 60000)$data
forest = randomForest(DEP_DEL15 ~., data = flights2015_over, ntree=500, na.action = na.pass)
flights2015_over <- ovun.sample(DEP_DEL15 ~ ., data = flights2015_mod_v3, method = "both", N = 60000)$data
View(flights2015_over)
View(flights2015_over)
flights2015_mod_v3 <- flights2015_mod_v2[-which(is.na(flights2015_mod_v2$DEP_DEL15)),]
flights2015_mod_v3$DEP_DEL15 <- as.factor(flights2015_mod_v3$DEP_DEL15)
flights2015_over <- ovun.sample(DEP_DEL15 ~ ., data = flights2015_mod_v3, method = "both", N = 60000)$data
table(flights2015_over$DEP_DEL15)
forest = randomForest(DEP_DEL15 ~., data = flights2015_over, ntree = 500, na.action = na.pass)
forest = randomForest(DEP_DEL15 ~., data = flights2015_mod_v3, ntree = 500, na.action = na.pass)
helo(randomForest)
help(randomForest)
flights2015_mod_v3$DEP_DEL15 <- factor(flights2015_mod_v3$DEP_DEL15)
forest = randomForest(DEP_DEL15 ~., data = flights2015_mod_v3, ntree = 500, na.action = na.pass)
dim(flights2015_over$DEP_DEL15)
length(flights2015_over$DEP_DEL15)
dim(flights2015_mod_v3)
forest = randomForest(DEP_DEL15 ~., data = flights2015_over, ntree = 500, na.action = na.pass)
rm(list=ls())
library(tidyverse)
library(forcats)
library(devtools)
flights15 <- read.csv("flights2015.csv")
flights2015_mod = flights15[, -c(31:33, 35:40, 42:50, 52:53, 57:64)]
#### ORIGIN airport delays ####
### filter our delayed flights ###
flights2015_mod_delay <- flights2015_mod[which(flights2015_mod$DEP_DEL15==1),]
### group by days ###
delays_by_days <- flights2015_mod_delay %>%
group_by(FL_DATE, ORIGIN_AIRPORT_ID) %>%
summarize(delays = n())
### get previous day ###
delays_by_days_2 <- mutate(delays_by_days,
FL_DATE_2 = as.character(as.Date(FL_DATE)-1))
delays_by_days_3 <- left_join(delays_by_days_2, delays_by_days,
by = c("FL_DATE_2" = "FL_DATE",
"ORIGIN_AIRPORT_ID" = "ORIGIN_AIRPORT_ID"))
delays_by_days_3 <- mutate(delays_by_days_3,
delays_2 = rowSums(cbind(delays.x, delays.y), na.rm=TRUE))
### add to data set ###
flights2015_mod_v1 <- left_join(flights2015_mod, delays_by_days_3,
by = c("FL_DATE" = "FL_DATE",
"ORIGIN_AIRPORT_ID" = "ORIGIN_AIRPORT_ID"))
flights2015_mod_v1 <- flights2015_mod_v1[, -c(38:39)]
#### DESTINATION airport delays ####
### group by days ###
delays_by_des <- flights2015_mod_v1 %>%
group_by(FL_DATE, DEST_AIRPORT_ID) %>%
summarize(delays_des = n())
### get previous day ###
delays_by_des_2 <- mutate(delays_by_des,
FL_DATE_2 = as.character(as.Date(FL_DATE)-1))
delays_by_des_3 <- left_join(delays_by_des_2, delays_by_des,
by = c("FL_DATE_2" = "FL_DATE",
"DEST_AIRPORT_ID" = "DEST_AIRPORT_ID"))
delays_by_des_3 <- mutate(delays_by_des_3,
delays_des_2 = rowSums(cbind(delays_des.x,
delays_des.y),
na.rm=TRUE))
### add to data set ###
flights2015_mod_v2 <- left_join(flights2015_mod_v1, delays_by_des_3,
by = c("FL_DATE" = "FL_DATE",
"DEST_AIRPORT_ID" = "DEST_AIRPORT_ID"))
### get rid of useless variables ###
flights2015_mod_v2 <- flights2015_mod_v2[, -c(40:41)]
flights2015_mod_v3 <- flights2015_mod_v2[-which(is.na(flights2015_mod_v2$DEP_DEL15)),]
flights2015_mod_v3$DEP_DEL15 <- factor(flights2015_mod_v3$DEP_DEL15)
#### ORIGIN airport delays ####
flights16_v <- read.csv("flights2016_visible.csv")
flights16_g <- read.csv("flights2016_guess.csv")
### filter our delayed flights ###
flights16_v_delay <- flights16_v[which(flights16_v$DEP_DEL15==1),]
### group by days ###
delays_by_days_16 <- flights16_v_delay %>%
group_by(FL_DATE, ORIGIN_AIRPORT_ID) %>%
summarize(delays = n())
### get previous day ###
delays_by_days_16_2 <- mutate(delays_by_days_16,
FL_DATE_2 = as.character(as.Date(FL_DATE)-1))
delays_by_days_16_3 <- left_join(delays_by_days_16_2, delays_by_days_16,
by = c("FL_DATE_2" = "FL_DATE",
"ORIGIN_AIRPORT_ID" = "ORIGIN_AIRPORT_ID"))
delays_by_days_16_3 <- mutate(delays_by_days_16_3,
delays_2 = rowSums(cbind(delays.x, delays.y), na.rm=TRUE))
### add to data set ###
flights16_v1 <- left_join(flights16_g, delays_by_days_16_3,
by = c("FL_DATE" = "FL_DATE",
"ORIGIN_AIRPORT_ID" = "ORIGIN_AIRPORT_ID"))
flights16_v1 <- flights16_v1[, -c(66:67)]
#### DESTINATION airport delays ####
### group by days ###
delays_by_des_16 <- flights16_v_delay %>%
group_by(FL_DATE, DEST_AIRPORT_ID) %>%
summarize(delays_des = n())
### get previous day ###
delays_by_des_16_2 <- mutate(delays_by_des_16,
FL_DATE_2 = as.character(as.Date(FL_DATE)-1))
delays_by_des_16_3 <- left_join(delays_by_des_16_2, delays_by_des_16,
by = c("FL_DATE_2" = "FL_DATE",
"DEST_AIRPORT_ID" = "DEST_AIRPORT_ID"))
delays_by_des_16_3 <- mutate(delays_by_des_16_3,
delays_des_2 = rowSums(cbind(delays_des.x,
delays_des.y),
na.rm=TRUE))
### add to data set ###
flights16_v2 <- left_join(flights16_v1, delays_by_des_16_3,
by = c("FL_DATE" = "FL_DATE",
"DEST_AIRPORT_ID" = "DEST_AIRPORT_ID"))
flights16_v2 <- flights16_v2[, -c(68:69)]
holidays <- c('2015-01-01', '2015-01-19', '2015-02-14', '2015-02-16',
'2015-05-25', '2015-07-04', '2015-09-07',
'2015-10-12','2015-11-11','2015-11-26', '2015-12-25')
holidayDates <- as.Date(holidays)
DaysToHoliday <- function(month, day){
# Input a month and day from the flightsDB
# Get our year.
year <- 2015
currDate <- as.Date(paste(year,month,day,sep = '-'))
# Create a DATE object we can use to calculate the time difference
numDays <- as.numeric(min(abs(currDate-holidayDates)))
# Now find the minimum difference between the date and our holidays
return(numDays)
# We can vectorize this to automatically find the minimum closest
# holiday by subtracting all holidays at once
}
# Get all of the dates through unique Month/Day combinations
datesOfYear <- unique(flights2015_mod_v2[,3:4])
# Apply our function in a vectorized manner via one of R's many "apply" functions (in this case mapply)
# to each unique date and save
datesOfYear$HDAYS <- mapply(DaysToHoliday, datesOfYear$MONTH, datesOfYear$DAY_OF_MONTH)
InputDays <- function(month,day){
finalDays <- datesOfYear$HDAYS[datesOfYear$MONTH == month & datesOfYear$DAY_OF_MONTH == day] # Find which row to get
return(finalDays)
}
flights2015_mod_v2$HDAYS <- mapply(InputDays,
flights2015_mod_v2$MONTH,
flights2015_mod_v2$DAY_OF_MONTH)
forest = randomForest(DEP_DEL15 ~., data = flights2015_mod_v3, ntree = 500, na.action = na.pass)
dim(flights2015_mod_v3)
flights2015_over <- ovun.sample(DEP_DEL15 ~ ., data = flights2015_mod_v2, method = "both", N = 60000)$data
forest = randomForest(DEP_DEL15 ~., data = flights2015_mod_v2, ntree = 500, na.action = na.pass)
forest = randomForest(DEP_DEL15 ~., data = flights2015_over, ntree = 500, na.action = na.pass)
table(flights2015_over)
table(flights2015_over)[1]
help(factor)
rm(list=ls())
library(tidyverse)
library(forcats)
library(devtools)
flights15 <- read.csv("flights2015.csv")
flights2015_mod = flights15[, -c(31:33, 35:40, 42:50, 52:53, 57:64)]
#### ORIGIN airport delays ####
### filter our delayed flights ###
flights2015_mod_delay <- flights2015_mod[which(flights2015_mod$DEP_DEL15==1),]
### group by days ###
delays_by_days <- flights2015_mod_delay %>%
group_by(FL_DATE, ORIGIN_AIRPORT_ID) %>%
summarize(delays = n())
### get previous day ###
delays_by_days_2 <- mutate(delays_by_days,
FL_DATE_2 = as.character(as.Date(FL_DATE)-1))
delays_by_days_3 <- left_join(delays_by_days_2, delays_by_days,
by = c("FL_DATE_2" = "FL_DATE",
"ORIGIN_AIRPORT_ID" = "ORIGIN_AIRPORT_ID"))
delays_by_days_3 <- mutate(delays_by_days_3,
delays_2 = rowSums(cbind(delays.x, delays.y), na.rm=TRUE))
### add to data set ###
flights2015_mod_v1 <- left_join(flights2015_mod, delays_by_days_3,
by = c("FL_DATE" = "FL_DATE",
"ORIGIN_AIRPORT_ID" = "ORIGIN_AIRPORT_ID"))
flights2015_mod_v1 <- flights2015_mod_v1[, -c(38:39)]
#### DESTINATION airport delays ####
### group by days ###
delays_by_des <- flights2015_mod_v1 %>%
group_by(FL_DATE, DEST_AIRPORT_ID) %>%
summarize(delays_des = n())
### get previous day ###
delays_by_des_2 <- mutate(delays_by_des,
FL_DATE_2 = as.character(as.Date(FL_DATE)-1))
delays_by_des_3 <- left_join(delays_by_des_2, delays_by_des,
by = c("FL_DATE_2" = "FL_DATE",
"DEST_AIRPORT_ID" = "DEST_AIRPORT_ID"))
delays_by_des_3 <- mutate(delays_by_des_3,
delays_des_2 = rowSums(cbind(delays_des.x,
delays_des.y),
na.rm=TRUE))
### add to data set ###
flights2015_mod_v2 <- left_join(flights2015_mod_v1, delays_by_des_3,
by = c("FL_DATE" = "FL_DATE",
"DEST_AIRPORT_ID" = "DEST_AIRPORT_ID"))
### get rid of useless variables ###
flights2015_mod_v2 <- flights2015_mod_v2[, -c(40:41)]
flights2015_mod_v2$DEP_DEL15 <- factor(flights2015_mod_v2$DEP_DEL15)
table(flights2015_mod_v2$DEP_DEL15)
flights2015_over <- ovun.sample(DEP_DEL15 ~ ., data = flights2015_mod_v2, method = "both", N = 60000)$data
table(flights2015_over$DEP_DEL15)
flights2015_over <- ovun.sample(DEP_DEL15 ~ ., data = flights2015_mod_v2, method = "both", N = 60000)$data
forest = randomForest(DEP_DEL15 ~., data = flights2015_over, ntree = 500, na.action = na.pass)
summary(flights2015_over)
View(flights2015_mod_v2)
View(flights2015_mod_v2)
flights2015_mod_v2 <- flights2015_mod_v2[, -c(1, 6, 40:41)]
flights2015_mod_v2$DEP_DEL15 <- factor(flights2015_mod_v2$DEP_DEL15)
library(ROSE)
flights2015_over <- ovun.sample(DEP_DEL15 ~ ., data = flights2015_mod_v2, method = "both", N = 60000)$data
library(randomForest)
forest = randomForest(DEP_DEL15 ~., data = flights2015_over, ntree = 500, na.action = na.pass)
summary(flights2015_over)
summary(flights2015_over)
table(flights2015_over$UNIQUE_CARRIER)
table(flights2015_over$AIRLINE_ID)
table(flights2015_over$CARRIER)
table(flights2015_over$TAIL_NUM)
table(flights2015_over$FL_NUM)
View(flights2015_over)
View(flights2015_over)
forest = randomForest(DEP_DEL15 ~., data = flights2015_over[, -c(8,9)], ntree = 500, na.action = na.pass)
set.seed(4)
idx = sample(1:nrow(dat),10000)
testing = flights2015_over[idx,]
set.seed(4)
idx = sample(1:nrow(flights2015_over),10000)
testing = flights2015_over[idx,]
training = flights2015_over[-idx,]
library(randomForest)
forest = randomForest(DEP_DEL15 ~., data = training, ntree = 500, na.action = na.pass)
flights2015_over <- flights2015_over[, -c(8,9)]
set.seed(4)
idx = sample(1:nrow(flights2015_over),10000)
testing = flights2015_over[idx,]
training = flights2015_over[-idx,]
forest = randomForest(DEP_DEL15 ~., data = training, ntree = 500, na.action = na.pass)
mean(yhat!=testing$DEP_DEL15)
yhat = predict(forest,newdata=testing)
mean(yhat!=testing$DEP_DEL15)
importance(forest)
varImpPlot(forest)
importance(forest)
varImpPlot(forest)
sort(importance(forest))
importance(forest)
idx = sample(1:nrow(flights2015_over),20000)
testing = flights2015_over[idx,]
training = flights2015_over[-idx,]
forest = randomForest(DEP_DEL15 ~., data = training, ntree = 500, na.action = na.pass)
yhat = predict(forest,newdata=testing)
mean(yhat!=testing$DEP_DEL15)
importance(forest)
varImpPlot(forest)
