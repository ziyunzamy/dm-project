flights2015_over$DAY_OF_MONTH <- factor(flights2015_over$DAY_OF_MONTH)
flights2015_over$DAY_OF_WEEK <- factor(flights2015_over$DAY_OF_WEEK)
flights2015_over$DISTANCE_GROUP <- factor(flights2015_over$DISTANCE_GROUP)
flights2015_over$QUARTER <- factor(flights2015_over$QUARTER)
flights2015_over$ARR_TIME <- factor(flights2015_over$ARR_TIME)
flights2015_over$DEP_TIME <- factor(flights2015_over$DEP_TIME)
flights16_v_final$DEP_DEL15 <- factor(flights16_v_final$DEP_DEL15)
flights16_v_final$WEEKEND <- factor(flights16_v_final$WEEKEND)
flights16_v_final$MONTH <- factor(flights16_v_final$MONTH)
flights16_v_final$SEASON <- factor(flights16_v_final$SEASON)
flights16_v_final$DAY_OF_MONTH <- factor(flights16_v_final$DAY_OF_MONTH)
flights16_v_final$DAY_OF_WEEK <- factor(flights16_v_final$DAY_OF_WEEK)
flights16_v_final$DISTANCE_GROUP <- factor(flights16_v_final$DISTANCE_GROUP)
flights16_v_final$QUARTER <- factor(flights16_v_final$QUARTER)
flights16_v_final$ARR_TIME <- factor(flights16_v_final$ARR_TIME)
flights16_v_final$DEP_TIME <- factor(flights16_v_final$DEP_TIME)
flights16_g$DEP_DEL15 <- factor(flights16_g$DEP_DEL15)
flights16_g$WEEKEND <- factor(flights16_g$WEEKEND)
flights16_g$MONTH <- factor(flights16_g$MONTH)
flights16_g$SEASON <- factor(flights16_g$SEASON)
flights16_g$DAY_OF_MONTH <- factor(flights16_g$DAY_OF_MONTH)
flights16_g$DAY_OF_WEEK <- factor(flights16_g$DAY_OF_WEEK)
flights16_g$DISTANCE_GROUP <- factor(flights16_g$DISTANCE_GROUP)
flights16_g$QUARTER <- factor(flights16_g$QUARTER)
flights16_g$ARR_TIME <- factor(flights16_g$ARR_TIME)
flights16_g$DEP_TIME <- factor(flights16_g$DEP_TIME)
library(ROSE)
#Make test set
set.seed(4)
idx = sample(1:nrow(flights2015_over), 15000)
testing = flights2015_over[idx,]
training = flights2015_over[-idx,]
#training <- ovun.sample(DEP_DEL15 ~ ., data = training, method = "both", N = 40000)$data
# Fit RF with less variables based on varible importance
forest_sel= randomForest(DEP_DEL15 ~ DEP_TIME + ARR_TIME + delays.x + delays_2 + HDAYS + DAY_OF_MONTH +
SEASON + delays_des.x + delays_des_2 + CRS_ELAPSED_TIME +
DAY_OF_WEEK +  MONTH + DISTANCE_GROUP + DISTANCE,
data = training, ntree = 1000, na.action = na.omit)
yhat_test_sel = predict(forest_sel,newdata = testing)
yhat_train_sel = predict(forest_sel, newdata = training)
test_err_sel = mean(yhat_test_sel != testing$DEP_DEL15)
train_err_sel = mean(yhat_train_sel != training$DEP_DEL15)
# Test Model on 2016 data
ytest_16_test = predict(forest_sel,newdata = flights16_v_final)
test_err_sel_16 = mean(ytest_16_test != flights16_v_final$DEP_DEL15)
y_16_guess = predict(forest_sel, newdata = flights16_g)
summary(y_16_guess)
table(yhat_test_sel, testing$DEP_DEL15)
summary(testing$DEP_DEL15)
rm(list=ls())
library(tidyverse)
library(devtools)
flights2015_over <- read.csv("flights2015_over.csv")
flights16_v_final <- read.csv("flights16_v_over.csv")
flights16_g <- read.csv("flights16_g_over.csv")
flights2015_over$DEP_DEL15 <- factor(flights2015_over$DEP_DEL15)
flights2015_over$WEEKEND <- factor(flights2015_over$WEEKEND)
flights2015_over$MONTH <- factor(flights2015_over$MONTH)
flights2015_over$SEASON <- factor(flights2015_over$SEASON)
flights2015_over$DAY_OF_MONTH <- factor(flights2015_over$DAY_OF_MONTH)
flights2015_over$DAY_OF_WEEK <- factor(flights2015_over$DAY_OF_WEEK)
flights2015_over$DISTANCE_GROUP <- factor(flights2015_over$DISTANCE_GROUP)
flights2015_over$QUARTER <- factor(flights2015_over$QUARTER)
flights2015_over$ARR_TIME <- factor(flights2015_over$ARR_TIME)
flights2015_over$DEP_TIME <- factor(flights2015_over$DEP_TIME)
flights16_v_final$DEP_DEL15 <- factor(flights16_v_final$DEP_DEL15)
flights16_v_final$WEEKEND <- factor(flights16_v_final$WEEKEND)
flights16_v_final$MONTH <- factor(flights16_v_final$MONTH)
flights16_v_final$SEASON <- factor(flights16_v_final$SEASON)
flights16_v_final$DAY_OF_MONTH <- factor(flights16_v_final$DAY_OF_MONTH)
flights16_v_final$DAY_OF_WEEK <- factor(flights16_v_final$DAY_OF_WEEK)
flights16_v_final$DISTANCE_GROUP <- factor(flights16_v_final$DISTANCE_GROUP)
flights16_v_final$QUARTER <- factor(flights16_v_final$QUARTER)
flights16_v_final$ARR_TIME <- factor(flights16_v_final$ARR_TIME)
flights16_v_final$DEP_TIME <- factor(flights16_v_final$DEP_TIME)
flights16_g$DEP_DEL15 <- factor(flights16_g$DEP_DEL15)
flights16_g$WEEKEND <- factor(flights16_g$WEEKEND)
flights16_g$MONTH <- factor(flights16_g$MONTH)
flights16_g$SEASON <- factor(flights16_g$SEASON)
flights16_g$DAY_OF_MONTH <- factor(flights16_g$DAY_OF_MONTH)
flights16_g$DAY_OF_WEEK <- factor(flights16_g$DAY_OF_WEEK)
flights16_g$DISTANCE_GROUP <- factor(flights16_g$DISTANCE_GROUP)
flights16_g$QUARTER <- factor(flights16_g$QUARTER)
flights16_g$ARR_TIME <- factor(flights16_g$ARR_TIME)
flights16_g$DEP_TIME <- factor(flights16_g$DEP_TIME)
library(ROSE)
#Make test set
set.seed(4)
idx = sample(1:nrow(flights2015_over), 15000)
testing = flights2015_over[idx,]
training = flights2015_over[-idx,]
training <- ovun.sample(DEP_DEL15 ~ ., data = training, method = "both", N = 30000)$data
# Fit RF with less variables based on varible importance
forest_sel= randomForest(DEP_DEL15 ~ DEP_TIME + ARR_TIME + delays.x + delays_2 + HDAYS + DAY_OF_MONTH +
SEASON + delays_des.x + delays_des_2 + CRS_ELAPSED_TIME +
DAY_OF_WEEK +  MONTH + DISTANCE_GROUP + DISTANCE,
data = training, ntree = 1000, na.action = na.omit)
yhat_test_sel = predict(forest_sel,newdata = testing)
yhat_train_sel = predict(forest_sel, newdata = training)
test_err_sel = mean(yhat_test_sel != testing$DEP_DEL15)
train_err_sel = mean(yhat_train_sel != training$DEP_DEL15)
ytest_16_test = predict(forest_sel,newdata = flights16_v_final)
test_err_sel_16 = mean(ytest_16_test != flights16_v_final$DEP_DEL15)
y_16_guess = predict(forest_sel, newdata = flights16_g)
summary(y_16_guess)
table(yhat_test_sel, testing$DEP_DEL15)
summary(testing$DEP_DEL15)
library(ROSE)
#Make test set
set.seed(4)
idx = sample(1:nrow(flights2015_over), 15000)
testing = flights2015_over[idx,]
training = flights2015_over[-idx,]
training <- ovun.sample(DEP_DEL15 ~ ., data = training, method = "over", N = 30000)$data
library(ROSE)
#Make test set
set.seed(4)
idx = sample(1:nrow(flights2015_over), 15000)
testing = flights2015_over[idx,]
training = flights2015_over[-idx,]
training <- ovun.sample(DEP_DEL15 ~ ., data = training, method = "over", N = 40000)$data
# Fit RF with less variables based on varible importance
forest_sel= randomForest(DEP_DEL15 ~ DEP_TIME + ARR_TIME + delays.x + delays_2 + HDAYS + DAY_OF_MONTH +
SEASON + delays_des.x + delays_des_2 + CRS_ELAPSED_TIME +
DAY_OF_WEEK +  MONTH + DISTANCE_GROUP + DISTANCE,
data = training, ntree = 1000, na.action = na.omit)
yhat_test_sel = predict(forest_sel,newdata = testing)
yhat_train_sel = predict(forest_sel, newdata = training)
test_err_sel = mean(yhat_test_sel != testing$DEP_DEL15)
train_err_sel = mean(yhat_train_sel != training$DEP_DEL15)
ytest_16_test = predict(forest_sel,newdata = flights16_v_final)
test_err_sel_16 = mean(ytest_16_test != flights16_v_final$DEP_DEL15)
y_16_guess = predict(forest_sel, newdata = flights16_g)
summary(y_16_guess)
table(yhat_test_sel, testing$DEP_DEL15)
summary(testing$DEP_DEL15)
library(ROSE)
#Make test set
set.seed(4)
idx = sample(1:nrow(flights2015_over), 15000)
testing = flights2015_over[idx,]
training = flights2015_over[-idx,]
training <- ovun.sample(DEP_DEL15 ~ ., data = training, method = "under", N = 40000)$data
library(ROSE)
#Make test set
set.seed(4)
idx = sample(1:nrow(flights2015_over), 15000)
testing = flights2015_over[idx,]
training = flights2015_over[-idx,]
training <- ovun.sample(DEP_DEL15 ~ ., data = training, method = "under", N = 20000)$data
# Fit RF with less variables based on varible importance
forest_sel= randomForest(DEP_DEL15 ~ DEP_TIME + ARR_TIME + delays.x + delays_2 + HDAYS + DAY_OF_MONTH +
SEASON + delays_des.x + delays_des_2 + CRS_ELAPSED_TIME +
DAY_OF_WEEK +  MONTH + DISTANCE_GROUP + DISTANCE,
data = training, ntree = 1000, na.action = na.omit)
yhat_test_sel = predict(forest_sel,newdata = testing)
yhat_train_sel = predict(forest_sel, newdata = training)
test_err_sel = mean(yhat_test_sel != testing$DEP_DEL15)
train_err_sel = mean(yhat_train_sel != training$DEP_DEL15)
# Test Model on 2016 data
ytest_16_test = predict(forest_sel,newdata = flights16_v_final)
test_err_sel_16 = mean(ytest_16_test != flights16_v_final$DEP_DEL15)
y_16_guess = predict(forest_sel, newdata = flights16_g)
summary(y_16_guess)
table(yhat_test_sel, testing$DEP_DEL15)
summary(testing$DEP_DEL15)
mean(0 != testing$DEP_DEL15)
rm(list=ls())
library(tidyverse)
library(devtools)
flights2015_over <- read.csv("flights2015_over.csv")
flights2015_over$DEP_DEL15 <- factor(flights2015_over$DEP_DEL15)
flights16_v_final <- read.csv("flights16_v_over.csv")
flights16_g <- read.csv("flights16_g_over.csv")
# Make test set
set.seed(4)
idx = sample(1:nrow(flights2015_over),20000)
testing = flights2015_over[idx,]
training = flights2015_over[-idx,]
training$delays.x <- as.numeric(training$delays.x)
training$delays_2 <- as.numeric(training$delays_2)
train_x <- training[, c('delays.x','delays_2')]
train_y <- as.numeric(levels(training[, c('DEP_DEL15')]))[training[, c('DEP_DEL15')]]
testing$delays.x <- as.numeric(testing$delays.x)
testing$delays_2 <- as.numeric(testing$delays_2)
test_x <- testing[, c('delays.x','delays_2')]
test_y <- as.numeric(levels(training[, c('DEP_DEL15')]))[training[, c('DEP_DEL15')]]
library(xgboost)
boosting <- xgboost(data = data.matrix(train_x), label = train_y, max.depth = 5,
eta = 1, nthread = 2, nround = 2, objective = "binary:logistic")
y_pred_test_num <- predict(boosting, data.matrix(test_x))
y_pred_test <- as.numeric(y_pred_test_num  > 0.5)
test_err <-  mean(y_pred_test != testing$DEP_DEL15)
training <- ovun.sample(DEP_DEL15 ~ ., data = training, method = "under", N = 20000)$data
training <- ovun.sample(DEP_DEL15 ~ ., data = training, method = "both", N = 30000)$data
training$delays.x <- as.numeric(training$delays.x)
training$delays_2 <- as.numeric(training$delays_2)
train_x <- training[, c('delays.x','delays_2')]
train_y <- as.numeric(levels(training[, c('DEP_DEL15')]))[training[, c('DEP_DEL15')]]
testing$delays.x <- as.numeric(testing$delays.x)
testing$delays_2 <- as.numeric(testing$delays_2)
test_x <- testing[, c('delays.x','delays_2')]
test_y <- as.numeric(levels(training[, c('DEP_DEL15')]))[training[, c('DEP_DEL15')]]
library(xgboost)
boosting <- xgboost(data = data.matrix(train_x), label = train_y, max.depth = 5,
eta = 1, nthread = 2, nround = 2, objective = "binary:logistic")
y_pred_test_num <- predict(boosting, data.matrix(test_x))
y_pred_test <- as.numeric(y_pred_test_num  > 0.5)
test_err <-  mean(y_pred_test != testing$DEP_DEL15)
training$delays.x <- as.numeric(training$delays.x)
training$delays_2 <- as.numeric(training$delays_2)
train_x <- training[, c('delays.x','delays_2')]
train_y <- as.numeric(levels(training[, c('DEP_DEL15')]))[training[, c('DEP_DEL15')]]
testing$delays.x <- as.numeric(testing$delays.x)
testing$delays_2 <- as.numeric(testing$delays_2)
test_x <- testing[, c('delays.x','delays_2')]
test_y <- as.numeric(levels(training[, c('DEP_DEL15')]))[training[, c('DEP_DEL15')]]
library(xgboost)
boosting <- xgboost(data = data.matrix(train_x), label = train_y, max.depth = 10,
eta = 1, nthread = 2, nround = 2, objective = "binary:logistic")
y_pred_test_num <- predict(boosting, data.matrix(test_x))
y_pred_test <- as.numeric(y_pred_test_num  > 0.5)
test_err <-  mean(y_pred_test != testing$DEP_DEL15)
training$delays.x <- as.numeric(training$delays.x)
training$delays_2 <- as.numeric(training$delays_2)
train_x <- training[, c('delays.x','delays_2')]
train_y <- as.numeric(levels(training[, c('DEP_DEL15')]))[training[, c('DEP_DEL15')]]
testing$delays.x <- as.numeric(testing$delays.x)
testing$delays_2 <- as.numeric(testing$delays_2)
test_x <- testing[, c('delays.x','delays_2')]
test_y <- as.numeric(levels(training[, c('DEP_DEL15')]))[training[, c('DEP_DEL15')]]
library(xgboost)
boosting <- xgboost(data = data.matrix(train_x), label = train_y, max.depth = 10,
eta = 4, nthread = 2, nround = 2, objective = "binary:logistic")
y_pred_test_num <- predict(boosting, data.matrix(test_x))
y_pred_test <- as.numeric(y_pred_test_num  > 0.5)
test_err <-  mean(y_pred_test != testing$DEP_DEL15)
training$delays.x <- as.numeric(training$delays.x)
training$delays_2 <- as.numeric(training$delays_2)
train_x <- training[, c('delays.x','delays_2')]
train_y <- as.numeric(levels(training[, c('DEP_DEL15')]))[training[, c('DEP_DEL15')]]
testing$delays.x <- as.numeric(testing$delays.x)
testing$delays_2 <- as.numeric(testing$delays_2)
test_x <- testing[, c('delays.x','delays_2')]
test_y <- as.numeric(levels(training[, c('DEP_DEL15')]))[training[, c('DEP_DEL15')]]
library(xgboost)
boosting <- xgboost(data = data.matrix(train_x), label = train_y, max.depth = 10,
eta = 1, nthread = 10, nround = 2, objective = "binary:logistic")
y_pred_test_num <- predict(boosting, data.matrix(test_x))
y_pred_test <- as.numeric(y_pred_test_num  > 0.5)
test_err <-  mean(y_pred_test != testing$DEP_DEL15)
training$delays.x <- as.numeric(training$delays.x)
training$delays_2 <- as.numeric(training$delays_2)
train_x <- training[, c('delays.x','delays_2')]
train_y <- as.numeric(levels(training[, c('DEP_DEL15')]))[training[, c('DEP_DEL15')]]
testing$delays.x <- as.numeric(testing$delays.x)
testing$delays_2 <- as.numeric(testing$delays_2)
test_x <- testing[, c('delays.x','delays_2')]
test_y <- as.numeric(levels(training[, c('DEP_DEL15')]))[training[, c('DEP_DEL15')]]
library(xgboost)
boosting <- xgboost(data = data.matrix(train_x), label = train_y, max.depth = 10,
eta = 1, nthread = 4, nround = 2, objective = "binary:logistic")
y_pred_test_num <- predict(boosting, data.matrix(test_x))
y_pred_test <- as.numeric(y_pred_test_num  > 0.5)
test_err <-  mean(y_pred_test != testing$DEP_DEL15)
training$delays.x <- as.numeric(training$delays.x)
training$delays_2 <- as.numeric(training$delays_2)
train_x <- training[, c('delays.x','delays_2')]
train_y <- as.numeric(levels(training[, c('DEP_DEL15')]))[training[, c('DEP_DEL15')]]
testing$delays.x <- as.numeric(testing$delays.x)
testing$delays_2 <- as.numeric(testing$delays_2)
test_x <- testing[, c('delays.x','delays_2')]
test_y <- as.numeric(levels(training[, c('DEP_DEL15')]))[training[, c('DEP_DEL15')]]
library(xgboost)
boosting <- xgboost(data = data.matrix(train_x), label = train_y, max.depth = 10,
eta = 1, nthread = 4, nround = 20, objective = "binary:logistic")
y_pred_test_num <- predict(boosting, data.matrix(test_x))
y_pred_test <- as.numeric(y_pred_test_num  > 0.5)
test_err <-  mean(y_pred_test != testing$DEP_DEL15)
training$delays.x <- as.numeric(training$delays.x)
training$delays_2 <- as.numeric(training$delays_2)
train_x <- training[, c('delays.x','delays_2')]
train_y <- as.numeric(levels(training[, c('DEP_DEL15')]))[training[, c('DEP_DEL15')]]
testing$delays.x <- as.numeric(testing$delays.x)
testing$delays_2 <- as.numeric(testing$delays_2)
test_x <- testing[, c('delays.x','delays_2')]
test_y <- as.numeric(levels(training[, c('DEP_DEL15')]))[training[, c('DEP_DEL15')]]
library(xgboost)
boosting <- xgboost(data = data.matrix(train_x), label = train_y, max.depth = 10,
eta = 1, nthread = 4, nround = 2, objective = "binary:logistic")
y_pred_test_num <- predict(boosting, data.matrix(test_x))
y_pred_test <- as.numeric(y_pred_test_num  > 0.5)
test_err <-  mean(y_pred_test != testing$DEP_DEL15)
help("xgboost")
training$delays.x <- as.numeric(training$delays.x)
training$delays_2 <- as.numeric(training$delays_2)
train_x <- training[, c('delays.x','delays_2')]
train_y <- as.numeric(levels(training[, c('DEP_DEL15')]))[training[, c('DEP_DEL15')]]
testing$delays.x <- as.numeric(testing$delays.x)
testing$delays_2 <- as.numeric(testing$delays_2)
test_x <- testing[, c('delays.x','delays_2')]
test_y <- as.numeric(levels(training[, c('DEP_DEL15')]))[training[, c('DEP_DEL15')]]
library(xgboost)
boosting <- xgboost(data = data.matrix(train_x), label = train_y, max.depth = 10,
eta = 0.3, nthread = 4, nround = 2, objective = "binary:logistic")
y_pred_test_num <- predict(boosting, data.matrix(test_x))
y_pred_test <- as.numeric(y_pred_test_num  > 0.5)
test_err <-  mean(y_pred_test != testing$DEP_DEL15)
training$delays.x <- as.numeric(training$delays.x)
training$delays_2 <- as.numeric(training$delays_2)
train_x <- training[, c('delays.x','delays_2')]
train_y <- as.numeric(levels(training[, c('DEP_DEL15')]))[training[, c('DEP_DEL15')]]
testing$delays.x <- as.numeric(testing$delays.x)
testing$delays_2 <- as.numeric(testing$delays_2)
test_x <- testing[, c('delays.x','delays_2')]
test_y <- as.numeric(levels(training[, c('DEP_DEL15')]))[training[, c('DEP_DEL15')]]
library(xgboost)
boosting <- xgboost(data = data.matrix(train_x), label = train_y, max.depth = 5,
eta = 0.3, nthread = 4, nround = 2, objective = "binary:logistic")
y_pred_test_num <- predict(boosting, data.matrix(test_x))
y_pred_test <- as.numeric(y_pred_test_num  > 0.5)
test_err <-  mean(y_pred_test != testing$DEP_DEL15)
training$delays.x <- as.numeric(training$delays.x)
training$delays_2 <- as.numeric(training$delays_2)
train_x <- training[, c('delays.x','delays_2')]
train_y <- as.numeric(levels(training[, c('DEP_DEL15')]))[training[, c('DEP_DEL15')]]
testing$delays.x <- as.numeric(testing$delays.x)
testing$delays_2 <- as.numeric(testing$delays_2)
test_x <- testing[, c('delays.x','delays_2')]
test_y <- as.numeric(levels(training[, c('DEP_DEL15')]))[training[, c('DEP_DEL15')]]
library(xgboost)
boosting <- xgboost(data = data.matrix(train_x), label = train_y, max.depth = 6,
eta = 0.3, nround = 2, objective = "binary:logistic")
y_pred_test_num <- predict(boosting, data.matrix(test_x))
y_pred_test <- as.numeric(y_pred_test_num  > 0.5)
test_err <-  mean(y_pred_test != testing$DEP_DEL15)
training$delays.x <- as.numeric(training$delays.x)
training$delays_2 <- as.numeric(training$delays_2)
train_x <- training[, c('delays.x','delays_2')]
train_y <- as.numeric(levels(training[, c('DEP_DEL15')]))[training[, c('DEP_DEL15')]]
testing$delays.x <- as.numeric(testing$delays.x)
testing$delays_2 <- as.numeric(testing$delays_2)
test_x <- testing[, c('delays.x','delays_2')]
test_y <- as.numeric(levels(training[, c('DEP_DEL15')]))[training[, c('DEP_DEL15')]]
library(xgboost)
boosting <- xgboost(data = data.matrix(train_x), label = train_y, max.depth = 6,
eta = 0.3, nround = 2, objective = "binary:logistic")
y_pred_test_num <- predict(boosting, data.matrix(test_x))
y_pred_test <- as.numeric(y_pred_test_num  > 0.5)
test_err <-  mean(y_pred_test != testing$DEP_DEL15)
training$delays.x <- as.numeric(training$delays.x)
training$delays_2 <- as.numeric(training$delays_2)
train_x <- training[, c('delays.x','delays_2')]
train_y <- as.numeric(levels(training[, c('DEP_DEL15')]))[training[, c('DEP_DEL15')]]
testing$delays.x <- as.numeric(testing$delays.x)
testing$delays_2 <- as.numeric(testing$delays_2)
test_x <- testing[, c('delays.x','delays_2')]
test_y <- as.numeric(levels(training[, c('DEP_DEL15')]))[training[, c('DEP_DEL15')]]
library(xgboost)
boosting <- xgboost(data = data.matrix(train_x), label = train_y, max.depth = 6,
eta = 0.5, nround = 2, objective = "binary:logistic")
y_pred_test_num <- predict(boosting, data.matrix(test_x))
y_pred_test <- as.numeric(y_pred_test_num  > 0.5)
test_err <-  mean(y_pred_test != testing$DEP_DEL15)
training$CRS_ELAPSED_TIME  <- as.numeric(training$CRS_ELAPSED_TIME)
training$DISTANCE  <- as.numeric(training$DISTANCE)
training$delays.x <- as.numeric(training$delays.x)
training$delays_2 <- as.numeric(training$delays_2)
training$DEP_TIME <- as.numeric(training$DEP_TIME)
training$ARR_TIME <- as.numeric(training$ARR_TIME)
training$HDAYS <- as.numeric(training$HDAYS)
training$CRS_ELAPSED_TIME  <- as.numeric(training$CRS_ELAPSED_TIME)
training$DISTANCE  <- as.numeric(training$DISTANCE)
train_x <- training[, c('delays.x','delays_2', 'DEP_TIME', 'ARR_TIME', 'HDAYS',
'CRS_ELAPSED_TIME', 'DISTANCE')]
train_y <- as.numeric(levels(training[, c('DEP_DEL15')]))[training[, c('DEP_DEL15')]]
testing$delays.x <- as.numeric(testing$delays.x)
testing$delays_2 <- as.numeric(testing$delays_2)
testing$DEP_TIME <- as.numeric(testing$DEP_TIME)
testing$ARR_TIME <- as.numeric(testing$ARR_TIME)
testing$HDAYS <- as.numeric(testing$HDAYS)
testing$CRS_ELAPSED_TIME  <- as.numeric(testing$CRS_ELAPSED_TIME)
testing$DISTANCE  <- as.numeric(testing$DISTANCE)
test_x <- testing[, c('delays.x','delays_2', 'DEP_TIME', 'ARR_TIME', 'HDAYS',
'CRS_ELAPSED_TIME', 'DISTANCE')]
test_y <- as.numeric(levels(training[, c('DEP_DEL15')]))[training[, c('DEP_DEL15')]]
boosting <- xgboost(data = data.matrix(train_x), label = train_y, max.depth = 6,
eta = 0.5, nround = 2, objective = "binary:logistic")
y_pred_test_num <- predict(boosting, data.matrix(test_x))
y_pred_test <- as.numeric(y_pred_test_num  > 0.5)
test_err <-  mean(y_pred_test != testing$DEP_DEL15)
training$delays.x <- as.numeric(training$delays.x)
training$delays_2 <- as.numeric(training$delays_2)
training$DEP_TIME <- as.numeric(training$DEP_TIME)
training$ARR_TIME <- as.numeric(training$ARR_TIME)
training$HDAYS <- as.numeric(training$HDAYS)
training$CRS_ELAPSED_TIME  <- as.numeric(training$CRS_ELAPSED_TIME)
training$DISTANCE  <- as.numeric(training$DISTANCE)
train_x <- training[, c('delays.x','delays_2', 'DEP_TIME', 'ARR_TIME', 'HDAYS',
'CRS_ELAPSED_TIME', 'DISTANCE')]
train_y <- as.numeric(levels(training[, c('DEP_DEL15')]))[training[, c('DEP_DEL15')]]
testing$delays.x <- as.numeric(testing$delays.x)
testing$delays_2 <- as.numeric(testing$delays_2)
testing$DEP_TIME <- as.numeric(testing$DEP_TIME)
testing$ARR_TIME <- as.numeric(testing$ARR_TIME)
testing$HDAYS <- as.numeric(testing$HDAYS)
testing$CRS_ELAPSED_TIME  <- as.numeric(testing$CRS_ELAPSED_TIME)
testing$DISTANCE  <- as.numeric(testing$DISTANCE)
test_x <- testing[, c('delays.x','delays_2', 'DEP_TIME', 'ARR_TIME', 'HDAYS',
'CRS_ELAPSED_TIME', 'DISTANCE')]
test_y <- as.numeric(levels(training[, c('DEP_DEL15')]))[training[, c('DEP_DEL15')]]
library(xgboost)
boosting <- xgboost(data = data.matrix(train_x), label = train_y, max.depth = 6,
eta = 0.5, nround = 2, objective = "binary:logistic")
y_pred_test_num <- predict(boosting, data.matrix(test_x))
y_pred_test <- as.numeric(y_pred_test_num  > 0.5)
test_err <-  mean(y_pred_test != testing$DEP_DEL15)
training$delays.x <- as.numeric(training$delays.x)
training$delays_2 <- as.numeric(training$delays_2)
training$DEP_TIME <- as.numeric(training$DEP_TIME)
training$ARR_TIME <- as.numeric(training$ARR_TIME)
training$HDAYS <- as.numeric(training$HDAYS)
training$CRS_ELAPSED_TIME  <- as.numeric(training$CRS_ELAPSED_TIME)
training$DISTANCE  <- as.numeric(training$DISTANCE)
train_x <- training[, c('delays.x','delays_2', 'DEP_TIME', 'ARR_TIME', 'HDAYS',
'CRS_ELAPSED_TIME', 'DISTANCE')]
train_y <- as.numeric(levels(training[, c('DEP_DEL15')]))[training[, c('DEP_DEL15')]]
testing$delays.x <- as.numeric(testing$delays.x)
testing$delays_2 <- as.numeric(testing$delays_2)
testing$DEP_TIME <- as.numeric(testing$DEP_TIME)
testing$ARR_TIME <- as.numeric(testing$ARR_TIME)
testing$HDAYS <- as.numeric(testing$HDAYS)
testing$CRS_ELAPSED_TIME  <- as.numeric(testing$CRS_ELAPSED_TIME)
testing$DISTANCE  <- as.numeric(testing$DISTANCE)
test_x <- testing[, c('delays.x','delays_2', 'DEP_TIME', 'ARR_TIME', 'HDAYS',
'CRS_ELAPSED_TIME', 'DISTANCE')]
test_y <- as.numeric(levels(training[, c('DEP_DEL15')]))[training[, c('DEP_DEL15')]]
library(xgboost)
boosting <- xgboost(data = data.matrix(train_x), label = train_y, max.depth = 6,
eta = 0.3, nround = 2, objective = "binary:logistic")
y_pred_test_num <- predict(boosting, data.matrix(test_x))
y_pred_test <- as.numeric(y_pred_test_num  > 0.5)
test_err <-  mean(y_pred_test != testing$DEP_DEL15)
training$delays.x <- as.numeric(training$delays.x)
training$delays_2 <- as.numeric(training$delays_2)
training$DEP_TIME <- as.numeric(training$DEP_TIME)
training$ARR_TIME <- as.numeric(training$ARR_TIME)
training$HDAYS <- as.numeric(training$HDAYS)
training$CRS_ELAPSED_TIME  <- as.numeric(training$CRS_ELAPSED_TIME)
training$DISTANCE  <- as.numeric(training$DISTANCE)
train_x <- training[, c('delays.x','delays_2', 'DEP_TIME', 'ARR_TIME', 'HDAYS',
'CRS_ELAPSED_TIME', 'DISTANCE')]
train_y <- as.numeric(levels(training[, c('DEP_DEL15')]))[training[, c('DEP_DEL15')]]
testing$delays.x <- as.numeric(testing$delays.x)
testing$delays_2 <- as.numeric(testing$delays_2)
testing$DEP_TIME <- as.numeric(testing$DEP_TIME)
testing$ARR_TIME <- as.numeric(testing$ARR_TIME)
testing$HDAYS <- as.numeric(testing$HDAYS)
testing$CRS_ELAPSED_TIME  <- as.numeric(testing$CRS_ELAPSED_TIME)
testing$DISTANCE  <- as.numeric(testing$DISTANCE)
test_x <- testing[, c('delays.x','delays_2', 'DEP_TIME', 'ARR_TIME', 'HDAYS',
'CRS_ELAPSED_TIME', 'DISTANCE')]
test_y <- as.numeric(levels(training[, c('DEP_DEL15')]))[training[, c('DEP_DEL15')]]
library(xgboost)
boosting <- xgboost(data = data.matrix(train_x), label = train_y, max.depth = 6,
eta = 0.3, nround = 5, objective = "binary:logistic")
y_pred_test_num <- predict(boosting, data.matrix(test_x))
y_pred_test <- as.numeric(y_pred_test_num  > 0.5)
test_err <-  mean(y_pred_test != testing$DEP_DEL15)
rm(list=ls())
library(tidyverse)
library(devtools)
flights2015_over <- read.csv("flights2015_over.csv")
flights16_v_final <- read.csv("flights16_v_over.csv")
flights16_g <- read.csv("flights16_g_over.csv")
flights2015_over$DEP_DEL15 <- factor(flights2015_over$DEP_DEL15)
flights2015_over$WEEKEND <- factor(flights2015_over$WEEKEND)
flights2015_over$MONTH <- factor(flights2015_over$MONTH)
flights2015_over$SEASON <- factor(flights2015_over$SEASON)
flights2015_over$DAY_OF_MONTH <- factor(flights2015_over$DAY_OF_MONTH)
flights2015_over$DAY_OF_WEEK <- factor(flights2015_over$DAY_OF_WEEK)
flights2015_over$DISTANCE_GROUP <- factor(flights2015_over$DISTANCE_GROUP)
flights2015_over$QUARTER <- factor(flights2015_over$QUARTER)
flights2015_over$ARR_TIME <- factor(flights2015_over$ARR_TIME)
flights2015_over$DEP_TIME <- factor(flights2015_over$DEP_TIME)
flights16_v_final$DEP_DEL15 <- factor(flights16_v_final$DEP_DEL15)
flights16_v_final$WEEKEND <- factor(flights16_v_final$WEEKEND)
flights16_v_final$MONTH <- factor(flights16_v_final$MONTH)
flights16_v_final$SEASON <- factor(flights16_v_final$SEASON)
flights16_v_final$DAY_OF_MONTH <- factor(flights16_v_final$DAY_OF_MONTH)
flights16_v_final$DAY_OF_WEEK <- factor(flights16_v_final$DAY_OF_WEEK)
flights16_v_final$DISTANCE_GROUP <- factor(flights16_v_final$DISTANCE_GROUP)
flights16_v_final$QUARTER <- factor(flights16_v_final$QUARTER)
flights16_v_final$ARR_TIME <- factor(flights16_v_final$ARR_TIME)
flights16_v_final$DEP_TIME <- factor(flights16_v_final$DEP_TIME)
flights16_g$DEP_DEL15 <- factor(flights16_g$DEP_DEL15)
flights16_g$WEEKEND <- factor(flights16_g$WEEKEND)
flights16_g$MONTH <- factor(flights16_g$MONTH)
flights16_g$SEASON <- factor(flights16_g$SEASON)
flights16_g$DAY_OF_MONTH <- factor(flights16_g$DAY_OF_MONTH)
flights16_g$DAY_OF_WEEK <- factor(flights16_g$DAY_OF_WEEK)
flights16_g$DISTANCE_GROUP <- factor(flights16_g$DISTANCE_GROUP)
flights16_g$QUARTER <- factor(flights16_g$QUARTER)
flights16_g$ARR_TIME <- factor(flights16_g$ARR_TIME)
flights16_g$DEP_TIME <- factor(flights16_g$DEP_TIME)
library(ROSE)
#Make test set
set.seed(4)
idx = sample(1:nrow(flights2015_over), 15000)
testing = flights2015_over[idx,]
training = flights2015_over[-idx,]
training <- ovun.sample(DEP_DEL15 ~ ., data = training, method = "over", N = 40000)$data
